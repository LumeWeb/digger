// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models_generated

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/diggerhq/digger/next/model"
)

func newUserM2mApplication(db *gorm.DB, opts ...gen.DOOption) userM2mApplication {
	_userM2mApplication := userM2mApplication{}

	_userM2mApplication.userM2mApplicationDo.UseDB(db, opts...)
	_userM2mApplication.userM2mApplicationDo.UseModel(&model.UserM2mApplication{})

	tableName := _userM2mApplication.userM2mApplicationDo.TableName()
	_userM2mApplication.ALL = field.NewAsterisk(tableName)
	_userM2mApplication.ID = field.NewInt32(tableName, "id")
	_userM2mApplication.ClientID = field.NewString(tableName, "clientId")
	_userM2mApplication.Name = field.NewString(tableName, "name")
	_userM2mApplication.Description = field.NewString(tableName, "description")
	_userM2mApplication.CreatedAt = field.NewTime(tableName, "created_at")
	_userM2mApplication.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userM2mApplication.Email = field.NewString(tableName, "email")
	_userM2mApplication.Audience = field.NewString(tableName, "audience")
	_userM2mApplication.Issuer = field.NewString(tableName, "issuer")

	_userM2mApplication.fillFieldMap()

	return _userM2mApplication
}

type userM2mApplication struct {
	userM2mApplicationDo

	ALL         field.Asterisk
	ID          field.Int32
	ClientID    field.String
	Name        field.String
	Description field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	Email       field.String
	Audience    field.String
	Issuer      field.String

	fieldMap map[string]field.Expr
}

func (u userM2mApplication) Table(newTableName string) *userM2mApplication {
	u.userM2mApplicationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userM2mApplication) As(alias string) *userM2mApplication {
	u.userM2mApplicationDo.DO = *(u.userM2mApplicationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userM2mApplication) updateTableName(table string) *userM2mApplication {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.ClientID = field.NewString(table, "clientId")
	u.Name = field.NewString(table, "name")
	u.Description = field.NewString(table, "description")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.Email = field.NewString(table, "email")
	u.Audience = field.NewString(table, "audience")
	u.Issuer = field.NewString(table, "issuer")

	u.fillFieldMap()

	return u
}

func (u *userM2mApplication) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userM2mApplication) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["clientId"] = u.ClientID
	u.fieldMap["name"] = u.Name
	u.fieldMap["description"] = u.Description
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["email"] = u.Email
	u.fieldMap["audience"] = u.Audience
	u.fieldMap["issuer"] = u.Issuer
}

func (u userM2mApplication) clone(db *gorm.DB) userM2mApplication {
	u.userM2mApplicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userM2mApplication) replaceDB(db *gorm.DB) userM2mApplication {
	u.userM2mApplicationDo.ReplaceDB(db)
	return u
}

type userM2mApplicationDo struct{ gen.DO }

type IUserM2mApplicationDo interface {
	gen.SubQuery
	Debug() IUserM2mApplicationDo
	WithContext(ctx context.Context) IUserM2mApplicationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserM2mApplicationDo
	WriteDB() IUserM2mApplicationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserM2mApplicationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserM2mApplicationDo
	Not(conds ...gen.Condition) IUserM2mApplicationDo
	Or(conds ...gen.Condition) IUserM2mApplicationDo
	Select(conds ...field.Expr) IUserM2mApplicationDo
	Where(conds ...gen.Condition) IUserM2mApplicationDo
	Order(conds ...field.Expr) IUserM2mApplicationDo
	Distinct(cols ...field.Expr) IUserM2mApplicationDo
	Omit(cols ...field.Expr) IUserM2mApplicationDo
	Join(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo
	Group(cols ...field.Expr) IUserM2mApplicationDo
	Having(conds ...gen.Condition) IUserM2mApplicationDo
	Limit(limit int) IUserM2mApplicationDo
	Offset(offset int) IUserM2mApplicationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserM2mApplicationDo
	Unscoped() IUserM2mApplicationDo
	Create(values ...*model.UserM2mApplication) error
	CreateInBatches(values []*model.UserM2mApplication, batchSize int) error
	Save(values ...*model.UserM2mApplication) error
	First() (*model.UserM2mApplication, error)
	Take() (*model.UserM2mApplication, error)
	Last() (*model.UserM2mApplication, error)
	Find() ([]*model.UserM2mApplication, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserM2mApplication, err error)
	FindInBatches(result *[]*model.UserM2mApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserM2mApplication) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserM2mApplicationDo
	Assign(attrs ...field.AssignExpr) IUserM2mApplicationDo
	Joins(fields ...field.RelationField) IUserM2mApplicationDo
	Preload(fields ...field.RelationField) IUserM2mApplicationDo
	FirstOrInit() (*model.UserM2mApplication, error)
	FirstOrCreate() (*model.UserM2mApplication, error)
	FindByPage(offset int, limit int) (result []*model.UserM2mApplication, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserM2mApplicationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userM2mApplicationDo) Debug() IUserM2mApplicationDo {
	return u.withDO(u.DO.Debug())
}

func (u userM2mApplicationDo) WithContext(ctx context.Context) IUserM2mApplicationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userM2mApplicationDo) ReadDB() IUserM2mApplicationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userM2mApplicationDo) WriteDB() IUserM2mApplicationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userM2mApplicationDo) Session(config *gorm.Session) IUserM2mApplicationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userM2mApplicationDo) Clauses(conds ...clause.Expression) IUserM2mApplicationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userM2mApplicationDo) Returning(value interface{}, columns ...string) IUserM2mApplicationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userM2mApplicationDo) Not(conds ...gen.Condition) IUserM2mApplicationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userM2mApplicationDo) Or(conds ...gen.Condition) IUserM2mApplicationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userM2mApplicationDo) Select(conds ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userM2mApplicationDo) Where(conds ...gen.Condition) IUserM2mApplicationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userM2mApplicationDo) Order(conds ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userM2mApplicationDo) Distinct(cols ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userM2mApplicationDo) Omit(cols ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userM2mApplicationDo) Join(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userM2mApplicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userM2mApplicationDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userM2mApplicationDo) Group(cols ...field.Expr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userM2mApplicationDo) Having(conds ...gen.Condition) IUserM2mApplicationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userM2mApplicationDo) Limit(limit int) IUserM2mApplicationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userM2mApplicationDo) Offset(offset int) IUserM2mApplicationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userM2mApplicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserM2mApplicationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userM2mApplicationDo) Unscoped() IUserM2mApplicationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userM2mApplicationDo) Create(values ...*model.UserM2mApplication) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userM2mApplicationDo) CreateInBatches(values []*model.UserM2mApplication, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userM2mApplicationDo) Save(values ...*model.UserM2mApplication) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userM2mApplicationDo) First() (*model.UserM2mApplication, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM2mApplication), nil
	}
}

func (u userM2mApplicationDo) Take() (*model.UserM2mApplication, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM2mApplication), nil
	}
}

func (u userM2mApplicationDo) Last() (*model.UserM2mApplication, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM2mApplication), nil
	}
}

func (u userM2mApplicationDo) Find() ([]*model.UserM2mApplication, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserM2mApplication), err
}

func (u userM2mApplicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserM2mApplication, err error) {
	buf := make([]*model.UserM2mApplication, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userM2mApplicationDo) FindInBatches(result *[]*model.UserM2mApplication, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userM2mApplicationDo) Attrs(attrs ...field.AssignExpr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userM2mApplicationDo) Assign(attrs ...field.AssignExpr) IUserM2mApplicationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userM2mApplicationDo) Joins(fields ...field.RelationField) IUserM2mApplicationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userM2mApplicationDo) Preload(fields ...field.RelationField) IUserM2mApplicationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userM2mApplicationDo) FirstOrInit() (*model.UserM2mApplication, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM2mApplication), nil
	}
}

func (u userM2mApplicationDo) FirstOrCreate() (*model.UserM2mApplication, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserM2mApplication), nil
	}
}

func (u userM2mApplicationDo) FindByPage(offset int, limit int) (result []*model.UserM2mApplication, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userM2mApplicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userM2mApplicationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userM2mApplicationDo) Delete(models ...*model.UserM2mApplication) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userM2mApplicationDo) withDO(do gen.Dao) *userM2mApplicationDo {
	u.DO = *do.(*gen.DO)
	return u
}
