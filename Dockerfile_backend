FROM golang:1.22 as builder
ARG COMMIT_SHA
RUN echo "commit sha: ${COMMIT_SHA}"

# Set the working directory and ensure we're in the right directory structure
WORKDIR $GOPATH/src/github.com/diggerhq/digger

# Install Delve debugger
RUN go install github.com/go-delve/delve/cmd/dlv@latest

# Copy all required source, blacklist files that are not required through `.dockerignore`
COPY . .

# Debug step - let's see what we have
RUN pwd && ls -la && ls -la backend/

# Get the vendor library and version
RUN go version
ENV GOWORK=off
# Run these from the backend directory
WORKDIR $GOPATH/src/github.com/diggerhq/digger/backend
RUN go mod download
RUN go mod vendor

# Build with debug symbols instead of optimizations
RUN go build -mod=vendor -gcflags="all=-N -l" -ldflags="-X 'main.Version=${COMMIT_SHA}'" -o backend_exe .

FROM ubuntu:24.04 as runner
ENV ATLAS_VERSION v0.28.0
ARG COMMIT_SHA
WORKDIR /app

# Install Go in the runner stage
ENV GOLANG_VERSION=1.22.0
RUN apt-get update && apt-get install -y \
    ca-certificates \
    curl \
    git \
    wget \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

# Download and install Go with the correct version format
RUN curl -fsSL https://golang.org/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz -o golang.tar.gz \
    && tar -C /usr/local -xzf golang.tar.gz \
    && rm golang.tar.gz
# Set Go environment variables
ENV PATH=$PATH:/usr/local/go/bin
ENV GOPATH=/go
ENV GOBIN=$GOPATH/bin
ENV PATH=$PATH:$GOBIN

RUN update-ca-certificates

RUN echo "commit sha: ${COMMIT_SHA}"

# install atlas
RUN curl -sSf https://atlasgo.sh | sh

# Copy Delve from builder
COPY --from=builder /go/bin/dlv /usr/local/bin/dlv

# Expose the application and debugger ports
EXPOSE 3000 40000

# Copy the binary and source code for debugging
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/backend_exe /app/backend
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/scripts/entrypoint.sh /app/entrypoint.sh
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/migrations /app/migrations
COPY --from=builder /go/src/github.com/diggerhq/digger/backend/vendor /app/vendor
ADD backend/templates ./templates

# Create debug entrypoint script
RUN printf '#!/bin/bash\n\
set -e\n\
\n\
if [[ "${DEBUG}" == "true" ]]; then\n\
    # Run migrations first without debugging\n\
    cd /app\n\
    if [[ -z "${BASELINE_MIGRATION}" ]]; then\n\
        if [[ "${ALLOW_DIRTY}" == "true" ]]; then\n\
            atlas migrate apply --url $DATABASE_URL --allow-dirty\n\
        else\n\
            atlas migrate apply --url $DATABASE_URL\n\
        fi\n\
    else\n\
        atlas migrate apply --url $DATABASE_URL --baseline $BASELINE_MIGRATION\n\
    fi\n\
    \n\
    # Then debug only the backend\n\
    cd /app && exec dlv debug --headless --listen=:40000 --api-version=2 --accept-multiclient --continue\n\
else\n\
    # Normal execution\n\
    exec /app/entrypoint.sh\n\
fi' > /app/debug-entrypoint.sh && chmod +x /app/debug-entrypoint.sh && chmod +x /app/entrypoint.sh

# Use the new entrypoint script
ENTRYPOINT ["/app/debug-entrypoint.sh"]